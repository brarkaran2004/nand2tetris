
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        //inverse of MSB
        Not(in=instruction[15] , out=not15 );
        //And to check if its a C ins with writing A reg (5th bit)
        And(a=instruction[15] , b=instruction[5] , out=andout );
        //Mux to pass one
        Mux16(a=instruction , b=aluout , sel=andout , out=muxout );
        //write to A in 2 cases -> if a ins or its a c ins with 5th bit 1(mem write) 
        Or(a=not15 , b=andout , out=orout );
        ARegister(in=muxout , load=orout , out=aout,out[0..14]=addressM );
        // select either of a reg val or M val based on a(in ins set)
        And(a=instruction[12] , b=instruction[15] , out=andout2 );
        Mux16(a=aout , b=inM , sel=andout2 , out=muxout2 );
        //if write to mem d1 is 1
        And(a=instruction[15] , b=instruction[3] , out=writeM );
        //if bit 4 is and and its a c ins change d val
        And(a=instruction[15] , b=instruction[4] , out=andout3 );
        DRegister(in=aluout , load=andout3 , out=dout );
        //alu with specified bits as input
        ALU(x=dout , y=muxout2 ,zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=aluout, out=outM,zr=zrout, ng=ngout);

        //jump logic
        And(a=zrout, b=instruction[1], out=jeq);    // is zero and jump if zero
        And(a=ngout, b=instruction[2], out=jlt);    // is neg and jump if neg
        Or(a=zrout, b=ngout, out=zeroOrNeg);
        Not(in=zeroOrNeg, out=positive);            // is positive 
        And(a=positive, b=instruction[0], out=jgt); // is pos and jump if pos
        Or(a=jeq, b=jlt, out=jle);
        Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
        And(a=instruction[15], b=jumpToA, out=PCload); // Only jump if C instruction
        Not(in=PCload, out=PCinc);                  // only inc if not load
        PC(in=aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
                 
}
